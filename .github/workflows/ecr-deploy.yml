name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [ main ]  
  
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the Docker image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to ECS using AWS CLI
      id: deploy
      run: |
        echo "Starting deployment to ECS..."
        
        # Get the current task definition
        echo "Retrieving current task definition..."
        TASK_DEFINITION_FAMILY="${{ secrets.ECS_TASK_DEFINITION }}"
        aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_FAMILY" > task-def-description.json
        
        # Get the revision number
        REVISION=$(jq -r '.taskDefinition.revision' task-def-description.json)
        TASK_DEFINITION_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' task-def-description.json)
        echo "Current task definition: $TASK_DEFINITION_ARN (revision $REVISION)"
        
        # Get the container name
        CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}"
        NEW_IMAGE="${{ steps.build-image.outputs.image }}"
        echo "Updating container $CONTAINER_NAME with image $NEW_IMAGE"
        
        # Extract current container definitions
        jq '.taskDefinition.containerDefinitions' task-def-description.json > container-defs.json
        
        # Update the image in the container definitions
        jq --arg container "$CONTAINER_NAME" --arg image "$NEW_IMAGE" '
          map(if .name == $container then .image = $image else . end)
        ' container-defs.json > updated-container-defs.json
        
        # Create a new task definition - this is a direct approach 
        # that only includes container definitions to avoid parameter issues
        aws ecs register-task-definition \
          --family "$TASK_DEFINITION_FAMILY" \
          --container-definitions "$(cat updated-container-defs.json)" \
          --execution-role-arn "$(jq -r '.taskDefinition.executionRoleArn // ""' task-def-description.json)" \
          --task-role-arn "$(jq -r '.taskDefinition.taskRoleArn // ""' task-def-description.json)" \
          --network-mode "$(jq -r '.taskDefinition.networkMode // "bridge"' task-def-description.json)" \
          --cpu "$(jq -r '.taskDefinition.cpu // ""' task-def-description.json)" \
          --memory "$(jq -r '.taskDefinition.memory // ""' task-def-description.json)" \
          --requires-compatibilities "$(jq -r '.taskDefinition.requiresCompatibilities // [] | join(",")' task-def-description.json)" \
          > register-result.json
        
        # Extract the new task definition ARN
        NEW_TASK_DEFINITION_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' register-result.json)
        echo "New task definition registered: $NEW_TASK_DEFINITION_ARN"
        
        # Update the service with the new task definition
        echo "Updating ECS service..."
        aws ecs update-service \
          --cluster "${{ secrets.ECS_CLUSTER }}" \
          --service "${{ secrets.ECS_SERVICE }}" \
          --task-definition "$NEW_TASK_DEFINITION_ARN" \
          --force-new-deployment \
          > update-service-result.json
        
        # Wait for the service to stabilize
        echo "Waiting for service to stabilize..."
        aws ecs wait services-stable \
          --cluster "${{ secrets.ECS_CLUSTER }}" \
          --services "${{ secrets.ECS_SERVICE }}"
        
        if [ $? -eq 0 ]; then
          echo "✅ Deployment completed successfully!"
          echo "Service: ${{ secrets.ECS_SERVICE }}"
          echo "Cluster: ${{ secrets.ECS_CLUSTER }}"
          echo "New task definition: $NEW_TASK_DEFINITION_ARN"
          echo "New image: $NEW_IMAGE"
        else
          echo "❌ Deployment failed to stabilize!"
          exit 1
        fi
    
    - name: Deployment status
      if: always()
      run: |
        if [ "${{ steps.deploy.outcome }}" == "success" ]; then
          echo "✅ Overall deployment process completed successfully!"
        else
          echo "❌ Deployment process failed!"
          exit 1
        fi