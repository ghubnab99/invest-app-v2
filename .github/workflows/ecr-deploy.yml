name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [ main ]  
  
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the Docker image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Extract task definition components
      id: extract-task-def
      run: |
        # Download the current task definition
        aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition' > original-task-def.json
        
        # Extract essential components while removing problematic fields
        echo "Extracting essential components from task definition..."
        
        # Get container definitions but remove any enableFaultInjection fields
        jq '.containerDefinitions' original-task-def.json > container-defs.json
        
        # Extract other necessary fields individually
        FAMILY=$(jq -r '.family' original-task-def.json)
        echo "family=$FAMILY" >> $GITHUB_OUTPUT
        
        CPU=$(jq -r '.cpu // "256"' original-task-def.json)
        echo "cpu=$CPU" >> $GITHUB_OUTPUT
        
        MEMORY=$(jq -r '.memory // "512"' original-task-def.json) 
        echo "memory=$MEMORY" >> $GITHUB_OUTPUT
        
        # Extract role ARNs if they exist
        EXECUTION_ROLE=$(jq -r '.executionRoleArn // ""' original-task-def.json)
        if [ ! -z "$EXECUTION_ROLE" ]; then
          echo "execution_role=$EXECUTION_ROLE" >> $GITHUB_OUTPUT
        fi
        
        TASK_ROLE=$(jq -r '.taskRoleArn // ""' original-task-def.json)
        if [ ! -z "$TASK_ROLE" ]; then
          echo "task_role=$TASK_ROLE" >> $GITHUB_OUTPUT
        fi
        
        # Extract network mode
        NETWORK_MODE=$(jq -r '.networkMode // "awsvpc"' original-task-def.json)
        echo "network_mode=$NETWORK_MODE" >> $GITHUB_OUTPUT
        
        # Extract any volume definitions if they exist
        jq '.volumes // []' original-task-def.json > volumes.json
    
    - name: Create clean task definition
      id: create-task-def
      run: |
        # Create a new, clean task definition JSON
        echo "Creating new task definition..."
        
        # Start with the basic structure
        echo '{
          "family": "${{ steps.extract-task-def.outputs.family }}",
          "cpu": "${{ steps.extract-task-def.outputs.cpu }}",
          "memory": "${{ steps.extract-task-def.outputs.memory }}",
          "networkMode": "${{ steps.extract-task-def.outputs.network_mode }}"
        }' > new-task-def.json
        
        # Add roles if they exist
        if [ ! -z "${{ steps.extract-task-def.outputs.execution_role }}" ]; then
          jq '.executionRoleArn = "${{ steps.extract-task-def.outputs.execution_role }}"' new-task-def.json > temp.json && mv temp.json new-task-def.json
        fi
        
        if [ ! -z "${{ steps.extract-task-def.outputs.task_role }}" ]; then
          jq '.taskRoleArn = "${{ steps.extract-task-def.outputs.task_role }}"' new-task-def.json > temp.json && mv temp.json new-task-def.json
        fi
        
        # Add container definitions
        jq --slurpfile containers container-defs.json '.containerDefinitions = $containers[0]' new-task-def.json > temp.json && mv temp.json new-task-def.json
        
        # Add volumes if they exist and aren't empty
        VOLUMES_SIZE=$(jq 'length' volumes.json)
        if [ $VOLUMES_SIZE -gt 0 ]; then
          jq --slurpfile vols volumes.json '.volumes = $vols[0]' new-task-def.json > temp.json && mv temp.json new-task-def.json
        fi
        
        # Check for other required parameters based on network mode
        if [ "${{ steps.extract-task-def.outputs.network_mode }}" == "awsvpc" ]; then
          # Extract and add requiredCompatibilities if they exist
          jq '.requiredCompatibilities // ["EC2", "FARGATE"]' original-task-def.json > compat.json
          jq --slurpfile compat compat.json '.requiredCompatibilities = $compat[0]' new-task-def.json > temp.json && mv temp.json new-task-def.json
        fi
        
        # Update the container image in the new task definition
        CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}"
        NEW_IMAGE="${{ steps.build-image.outputs.image }}"
        
        jq --arg name "$CONTAINER_NAME" --arg image "$NEW_IMAGE" \
          '.containerDefinitions |= map(if .name == $name then .image = $image else . end)' \
          new-task-def.json > task-definition.json
        
        # Display the final task definition for debugging
        echo "Final task definition:"
        cat task-definition.json
    
    - name: Deploy Amazon ECS task definition
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Deployment status
      if: always()
      run: |
        if [ "${{ steps.deploy.outcome }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo "Service: ${{ secrets.ECS_SERVICE }}"
          echo "Cluster: ${{ secrets.ECS_CLUSTER }}"
          echo "New image: ${{ steps.build-image.outputs.image }}"
        else
          echo "❌ Deployment failed!"
          echo "For debugging purposes, here's the content of the task definition:"
          cat task-definition.json
          exit 1
        fi